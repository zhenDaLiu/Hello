<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yuntongxun.ytx.mapper.sys.SysRoleMapper">

    <resultMap id="rolePermissionMap" type="com.yuntongxun.ytx.pojo.vo.sys.SysRoleVo">
        <id column="role_id" property="id"/>
        <result column="role_code" property="roleCode"/>
        <result column="role_name" property="roleName"/>
        <result column="delete_status" property="deleteStatus"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <collection property="sysPermissions" ofType="com.yuntongxun.ytx.pojo.po.sys.SysPermission" javaType="java.util.ArrayList">
            <id column="permission_id" property="id"/>
            <result column="menu_code" property="menuCode"/>
            <result column="menu_name" property="menuName"/>
            <result column="permission_code" property="permissionCode"/>
            <result column="permission_name" property="permissionName"/>
            <result column="required_permission" property="requiredPermission"/>
        </collection>
    </resultMap>

    <sql id="BaseColumnList">
      role.id ,
      role.role_code as roleCode,
      role.role_name as roleName,
      role.delete_status as deleteStatus,
      role.create_time as createTime,
      role.update_time as updateTime
    </sql>

    <sql id="BasePermissionSql">
      p.id ,
      p.menu_code as menuCode,
      p.menu_name as menuName,
      p.permission_code as permissionCode,
      p.permission_name as permissionName,
      p.required_permission as requiredPermission
    </sql>

    <select id="selectPList" resultMap="rolePermissionMap">
        SELECT
        r1.id role_id,
        r1.role_code,
        r1.role_name,
        r1.delete_status,
        r1.create_time,
        r1.update_time,
        p.id permission_id,
        p.menu_name,
        p.menu_code,
        p.permission_code,
        p.permission_name,
        p.required_permission
        from
        (
          SELECT
            r.id,r.role_code, r.role_name, r.delete_status, r.create_time, r.update_time
          FROM ytx_sys_role r
          <trim prefix="WHERE" prefixOverrides="AND">
            <if test="role_name !=null and role_name !=''">
                and r.role_name like #{role_name}
            </if>
          </trim>
          limit #{start_row}, #{offset_limit}
        ) as r1
        LEFT JOIN ytx_sys_role_permission rp ON r1.id = rp.role_id
        LEFT JOIN ytx_sys_permission p ON p.id = rp.permission_id
        order by r1.create_time desc
    </select>

    <select id="selectPCount" resultType="java.lang.Integer">
        select
        count(0)
        from
        ytx_sys_role r
        <trim prefix="WHERE" prefixOverrides="AND">
            <if test="role_name !=null and role_name !=''">
                and r.role_name like #{role_name}
            </if>
        </trim>
    </select>

    <select id="findByUserId" parameterType="java.lang.Long" resultType="com.yuntongxun.ytx.pojo.po.sys.SysRole">
        SELECT
          <include refid="BaseColumnList"/>
        FROM
          ytx_sys_role role
        WHERE
        role.id IN (
          SELECT ur.role_id FROM ytx_sys_user_role ur WHERE ur.user_id = #{user_id}
        )
    </select>

    <delete id="clearPermission" parameterType="java.lang.Long">
        DELETE FROM ytx_sys_role_permission WHERE role_id = #{role_id}
    </delete>

    <!-- 批量插入 ytx_sys_role_permission -->
    <insert id ="givePermission" parameterType="java.util.List">
        insert into ytx_sys_role_permission
        (
          id ,
          role_id ,
          permission_id ,
          create_time ,
          update_time
        )
        values
        <foreach collection ="list" item="item" index= "index" separator =",">
            (
              #{item.id} ,
              #{item.roleId} ,
              #{item.permissionId} ,
              #{item.createTime} ,
              #{item.updateTime}
            )
        </foreach>
    </insert>

    <select id="findPermissionByRoleId" parameterType="java.lang.Long" resultType="com.yuntongxun.ytx.pojo.po.sys.SysPermission">
        select
        <include refid="BasePermissionSql"/>
        from ytx_sys_permission p
        LEFT JOIN ytx_sys_role_permission rp on p.id = rp.permission_id
        WHERE rp.role_id = #{role_id}
    </select>

    <update id="updateStatusById">
        update ytx_sys_role
        <trim prefix="set" prefixOverrides=",">
            <if test="delete_status !=null and delete_status !=''">
                delete_status = #{delete_status}
            </if>
        </trim>
        <trim prefix="WHERE" prefixOverrides="AND">
            <if test="id !=null and id !=''">
                and id = #{id}
            </if>
        </trim>
        limit 1
    </update>

    <select id="selectOneByRoleName" parameterType="java.lang.String" resultType="com.yuntongxun.ytx.pojo.po.sys.SysRole">
        SELECT
        <include refid="BaseColumnList"/>
        FROM ytx_sys_role role
        <trim prefix="WHERE" prefixOverrides="AND">
            <if test="role_name !=null and role_name !=''">
                and role.role_name = #{role_name}
            </if>
        </trim>
        limit 1
    </select>

    <!-- 检查用户是否是管理员 -->
    <select id="checkUserIsAdmin" resultType="com.yuntongxun.ytx.pojo.po.sys.SysRole">
        select
        <include refid="BaseColumnList"/>
        from ytx_sys_user_role ur
        INNER JOIN ytx_sys_user user on user.id = ur.user_id and user.delete_status = 1
        INNER JOIN ytx_sys_role role on role.id = ur.role_id and role.delete_status =1 and role_code = #{roleCode}
        where user.username= #{username}
        limit 1
    </select>

</mapper>